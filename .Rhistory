# load packages
library(knitr)
library(markdown)
library(rmarkdown)
# use first 5 rows of mtcars as example data
data.files <- c('../data/books/lines_curso-git_texto_ALL_md.csv',
'../data/books/lines_granada-off_text_ALL_md.csv',
'../data/books/lines_HashSlash_texto_HashSlash_md.csv',
'../data/books/lines_hoborg_text_text_md.csv',
'../data/books/lines_nyc-42-8_text_nyc-42-8_md.csv',
'../data/papers/lines_2015_books_paper_tex.csv',
'../data/papers/lines_2016-ea-languages-PPSN_ea-languages_Rnw.csv',
'../data/software/lines_Algorithm-Evolutionary_ALL_PL_ALL_ALL_pm_ALL_ALL_ALL_pm_ALL_ALL_ALL_ALL_pm_ALL_ALL_t.csv',
'../data/software/lines_Algorithm-Evolutionary_lib_Algorithm_ALL_pm_lib_Algorithm_Evolutionary_ALL_pm_lib_Algorithm_Evolutionary_ALL_ALL_pm.csv',
'../data/software/lines_nodeo_lib_ALL_js_lib_nodeo_ALL_js_lib_nodeo_ALL_ALL_js.csv',
'../data/software/lines_nqp_src_ALL_ALL_nqp.csv',
'../data/software/lines_polleitor_ALL_js_app_ALL_js_public_ALL_html_public_js_ALL_js_test_ALL_js.csv',
'../data/software/lines_tweepy_ALL_py_ALL_ALL_py_ALL_ALL_ALL_py.csv')
# for each type of car in the data create a report
# these reports are saved in output_dir with the name specified by output_file
for (file in data.files){
print(file)
report.file <- gsub('lines','report',file)
report.file <- gsub('csv','pdf',report.file)
report.file <- gsub('../data','.',report.file)
print(report.file)
rmarkdown::render(input = 'creativity.Rmd',
output_format = "pdf_document",
output_file = report.file,
output_dir = '.')
'../data/software/lines_Algorithm-Evolutionary_lib_Algorithm_ALL_pm_lib_Algorithm_Evolutionary_ALL_pm_lib_Algorithm_Evolutionary_ALL_ALL_pm.csv',
for (file in data.files){
print(file)
report.file <- gsub('lines','report',file)
report.file <- gsub('csv','pdf',report.file)
report.file <- gsub('../data','.',report.file)
print(report.file)
rmarkdown::render(input = 'creativity.Rmd',
output_format = "pdf_document",
output_file = report.file,
output_dir = '.')
}
library(ggplot2)
library("ggfortify")
library(dplyr)
#use
#words <- read.csv('../data/books/words-hoborg.csv')
# for testing here
words <- read.csv(file) # File should be established from an R script
lines <- words[-1,]
lines$Delta <- abs(lines$Delta)
words <- read.csv('../data/books/words-hoborg.csv')
# for testing here
#words <- read.csv(file) # File should be established from an R script
lines <- words[-1,]
lines$Delta <- abs(lines$Delta)
words <- read.csv("/home/jmerelo/proyectos/literaturame/data/books/words-hoborg.csv")
# for testing here
#words <- read.csv(file) # File should be established from an R script
lines <- words[-1,]
lines$Delta <- abs(lines$Delta)
lines
summary(lines)
gg.lines = ggplot(lines)
gg.lines+geom_point(aes(x=Commit,y=Delta))
gg.lines+geom_line(aes(x=Commit,y=Delta,group=1))
gg.lines+geom_point(aes(x=Commit,y=Delta))+scale_y_log10()
gg.lines+geom_line(aes(x=Commit,y=Delta,group=1))+scale_y_log10()
by.lines <- group_by(lines,Delta)
lines.count <- summarize(by.lines, count=n())
ggplot(lines.count, aes(x=Delta, y=count))+geom_point()+scale_x_log10()+scale_y_log10()
ggplot(data=lines, aes(lines$Delta)) + geom_histogram(bins=100)+scale_x_log10()
sorted.lines <- data.frame(x=1:length(lines$Delta),Delta=as.numeric(lines[order(-lines$Delta),]$Delta))
ggplot()+geom_point(data=sorted.lines,aes(x=x,y=Delta))
ggplot()+geom_point(data=sorted.lines,aes(x=x,y=Delta))+scale_y_log10()
sorted.lines.no0 <- sorted.lines[sorted.lines$Delta>0,]
zipf.fit <- lm(log(sorted.lines.no0$Delta) ~ sorted.lines.no0$x)
words <- read.csv("/home/jmerelo/proyectos/literaturame/data/books/words-hoborg.csv")
words
install.packages("TTR")
help(SMA)
??SMA
View(lines)
library(knitr)
knitr::purl('stats/creativity-novels.Rmd')
exit
quit()
